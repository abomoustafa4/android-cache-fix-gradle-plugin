import groovy.json.JsonBuilder
import org.gradle.util.VersionNumber

plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'codenarc'
    id "com.gradle.plugin-publish" version "0.12.0"
    id "org.gradle.test-retry" version "1.2.0"
}

group = "org.gradle.android"
version = ["git", "describe", "--match", "[0-9]*", "--dirty"].execute().text.trim()

// Maps supported Android plugin versions to the versions of Gradle that support it
def sevenDotZeroNightly = "7.0-20210222153642+0000"
def supportedVersions = [
    "7.0.0-alpha06": ["6.8.3", sevenDotZeroNightly],
    "4.2.0-beta05": ["6.8.3", sevenDotZeroNightly],
    "4.1.2": ["6.5.1", "6.8.3"],
    "4.0.2": ["6.1.1", "6.8.3"],
    "3.6.4": ["5.6.4", "6.8.3"],
    "3.5.4": ["5.4.1", "5.6.4", "6.8.3"]
]

repositories {
    google()
    mavenCentral()
    jcenter() {
        content {
            //  org.jetbrains.trove4j is only available in jcenter otherwise we don't want to rely on jcenter.
            includeGroup("org.jetbrains.trove4j")
        }
    }
}

dependencies {
    def agpVersion = "3.5.4"
    compileOnly "com.android.tools.build:gradle:$agpVersion"
    implementation gradleApi()
    testImplementation "com.android.tools.build:gradle:$agpVersion"
    testImplementation gradleTestKit()
    testImplementation "junit:junit:4.12"
    testImplementation "org.spockframework:spock-core:1.1-groovy-2.4@jar"
    testRuntime 'cglib:cglib-nodep:3.2.12'
    testRuntime 'org.objenesis:objenesis:3.1'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

def generatedResources = "$buildDir/generated-resources/main"

tasks.register('generateVersions') {
    def outputFile = file("$generatedResources/versions.json")
    inputs.property "version", version
    inputs.property "supportedVersions", supportedVersions
    outputs.dir generatedResources
    doLast {
        outputFile.text = new JsonBuilder([
            version: version,
            supportedVersions: supportedVersions
        ]).toPrettyString()
    }
}

sourceSets {
    main {
        output.dir(generatedResources, builtBy: generateVersions)
    }
}

gradlePlugin {
    plugins {
        androidCacheFixPlugin {
            id = 'org.gradle.android.cache-fix'
            displayName = 'Gradle Android cache fix plugin'
            description = 'Gradle plugin to fix Android caching problems'
            implementationClass = 'org.gradle.android.AndroidCacheFixPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/gradle/android-cache-fix-gradle-plugin'
    vcsUrl = 'https://github.com/gradle/android-cache-fix-gradle-plugin'

    tags = ['android', 'cache', 'fix']

    mavenCoordinates {
        groupId = "gradle.plugin.org.gradle.android"
    }
}

def localRepo = file("$buildDir/local-repo")

publishing {
    repositories {
        maven {
            url = localRepo.toURI()
        }
    }
}

// This is used by github actions to split out jobs by Android version test task
def generatedBuildResources = "$buildDir/build-resources"
tasks.register('generateTestTasksJson') {
    def outputFile = file("${generatedBuildResources}/androidTestTasks.json")
    inputs.property "supportedVersions", supportedVersions
    outputs.dir generatedBuildResources
    doLast {
        outputFile.text = new JsonBuilder(
            ['test'] + (supportedVersions.keySet().collect {androidVersion -> androidTestTaskName(androidVersion) })
        ).toString()
    }
}


tasks.withType(Test).configureEach {
    dependsOn publish
    systemProperty "local.repo", localRepo.toURI()
    retry {
        maxRetries = 3
        maxFailures = 20
    }
}

tasks.named("test") {
    useJUnit {
        // The main test task runs everything not annotated with the MultiVersionTest category
        excludeCategories 'org.gradle.android.MultiVersionTest'
    }
}

// Generate a test task for each Android version and run the tests annotated with the MultiVersionTest category
supportedVersions.keySet().each { androidVersion ->
    def versionSpecificTest = tasks.register(androidTestTaskName(androidVersion), Test) {
        description = "Runs the multi-version tests for AGP ${androidVersion}"
        group = "verification"
        
        javaLauncher = javaToolchains.launcherFor {
            languageVersion = jdkVersionFor(androidVersion)
        }
        useJUnit {
            includeCategories 'org.gradle.android.MultiVersionTest'
        }
        systemProperty 'org.gradle.android.testVersion', androidVersion
    }

    check.dependsOn versionSpecificTest
}

static def androidTestTaskName(String androidVersion) {
    return "testAndroid${normalizeVersion(androidVersion)}"
}

static def normalizeVersion(String version) {
    return version.replaceAll('[.\\-]', '_')
}

static def jdkVersionFor(String version) {
    return JavaLanguageVersion.of(VersionNumber.parse(version) > VersionNumber.parse("7.0.0-alpha01") ? 11 : 8)
}

tasks.register("sanityCheck") {
    dependsOn tasks.withType(CodeNarc)
}
